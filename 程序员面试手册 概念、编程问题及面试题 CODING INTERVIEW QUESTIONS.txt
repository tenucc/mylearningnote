程序员面试手册 概念、编程问题及面试题  CODING INTERVIEW QUESTIONS

author: [INDIA] Narasimha Karumanchi

Ch1 编程基础

1.1 变量
1.2 数据类型
data type; predefined value; integer; floating point unit number; character; string

system-defined data
user-defined
primitive data type
int float char double bool

structure class


struct newType{
    int data1;
    float data2;
    ...
    char data;
}


1.3 数据结构
data structure
数组、文件、链表、栈、队列、树、图

linear data structure:
链表、栈、队列
non-linear data structure:
可以按照非线性的顺序来存储、访问

1.4 抽象数据类型
Abstract Data Type == ADT

原始数据类型 int float 支持基本运算 operation

ADT由两部分组成：数据的声明、运算的声明

常用ADT包括：
链表、栈、队列、优先级队列、二叉树、字典、并查集disjoint set、哈希表、图

并查集 disjoint set支持合并和查找操作

栈采用LIFO机制来存储对象 last-in-first-out


1.5 内存与变量

每个location对应一个address

数组的下标或索引 index to array

地址  内存中的值

变量的大小：sizeof()

变量的地址：取地址运算符 & address-of operator

int X;
printf("The address is : %u\n", &X);


1.6 指针

指针也是也是一种变量，用来保存其他变量的地址。


1.6.1 指针的声明

声明指针所指向的变量类型。
必须知道：该指针存放的地址 对应哪种类型的变量

int *ptr1;
float *ptr2;
unsigned int *ptr3;
char *ptr4;
void *ptr5;

void指针可以指向任意数据


1.6.2 指针的使用

指针是可以存放地址的。这意味着，我们可以把变量的地址赋值给指针。

int X = 10;
int *ptr = &X;


以上操作是：令指针ptr指向X


间接参照：indirection
用来访问它所指向的那块内存中的数据

int X = 10;
int *ptr = &X;
*ptr = 25;

这样把X的值修改成25

void指针可以指向任意类型的数据，
void指针有一项限制，无法解引用 dereference

因为每种变量类型所占据的内存大小不一定相同，
在32位计算机上，int型变量占4字节，short型变量占2字节；
如果想把某个地址中存放的实际数值完整读取出来，编译器
必须知道自己应该读取多少个连续的内存位置



1.6.3 指针的操纵

指针可以做算术运算
指针其实就是个整数
与一般整数有一些微小区别
可以更直观更简介使用它

char *cptr = (chat*)2;
print("cptr before: %p", cptr)  //output:2
cptr++;
print("cptr after: %p", cptr)   //output:3


但是

int *iptr = (int*)2;
printf("iptr before: %p ", iptr);   //output:2
iptr++;
printf("iptr after: %p ", iptr);    //output:6

因为，integer占用四个字节 2、3、4、5
访问下一个integer就要从6开始 6、7、8、9
给指向integer的指针加1，并不等于给该指针所代表的内存地址加1；
char的大小是1，指向下一个char需要移动1个字节；
integer的大小是4，指向下一个integer需要移动4个字节。

void指针的另一项限制在于，无法做算术运算。
编译器并不清楚下一个变量与当前所指的变量之间到底隔了几个字节。
void指针一开始只能存放内存地址，稍后需要访问地址中的数据时，
必须先将其转换成某种特定的指针。


1.6.4 数组与指针

数组的名字可以理解成指向内存快起始处的指针，令该指针指向数组的开头。

short *ptr;
short array[10];
ptr = array;


这样的话，可以用指针来访数组中的内容，
比如ptr[2]=25 就是 array[2]=25;
数组也可以被当成指针来用，
比如*array=4实际就是array[0]=4;
实际上 *(array+n) 和 array[n] 等效

数组与指向其开头的指针之间只有一个区别，
那就是，编译器针对数组，会保存一些信息，
用以记录存储方面的要求。


如果把sizeof()用到数组和指针上，
sizeof(ptr)会给出指针本身占据的空间，比方说 4，
sizeof（array）会给出整个数组占据的空间，比方说20，10个元素没个占2字节


1.6.5 动态内存分配
？？？？

1.6.6 函数指针
？？？？

1.13 面向对象编程的基本概念

三个特征：
多态 polymorphism
继承 inheritance
封装 encapsulation

八个基本概念：
类与对象 class and object
封装 encapsulation
抽象 abstraction
数据隐藏 data hiding
多态 polymorphism
继承 inheritance
动态绑定 dynamic binding
消息传递 message passing

1.13.1 类与对象

1.13.5 多态



Ch2 脚本语言
